{"ast":null,"code":"var _jsxFileName = \"D:\\\\dexlx-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sequelize = require('./src/config/database');\n\n// Test the database connection\n(async () => {\n  try {\n    await sequelize.authenticate();\n    console.log('Database connection has been established successfully.');\n  } catch (error) {\n    console.error('Unable to connect to the database:', error);\n  }\n})();\nconst App = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    axios.get('http://localhost:5000/test-db').then(response => setData(response.data)).catch(error => console.error(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React + Node + PostgreSQL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 60\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","sequelize","require","authenticate","console","log","error","App","_s","data","setData","get","then","response","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["D:/dexlx-project/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst sequelize = require('./src/config/database');\n\n// Test the database connection\n(async () => {\n  try {\n    await sequelize.authenticate();\n    console.log('Database connection has been established successfully.');\n  } catch (error) {\n    console.error('Unable to connect to the database:', error);\n  }\n})();\n\n\nconst App = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/test-db')\n      .then(response => setData(response.data))\n      .catch(error => console.error(error));\n  }, []);\n\n  return (\n    <div>\n      <h1>React + Node + PostgreSQL</h1>\n      {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : <p>Loading...</p>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA,CAAC,YAAY;EACX,IAAI;IACF,MAAMD,SAAS,CAACE,YAAY,CAAC,CAAC;IAC9BC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;EACvE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;EAC5D;AACF,CAAC,EAAE,CAAC;AAGJ,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdE,KAAK,CAACa,GAAG,CAAC,+BAA+B,CAAC,CACvCC,IAAI,CAACC,QAAQ,IAAIH,OAAO,CAACG,QAAQ,CAACJ,IAAI,CAAC,CAAC,CACxCK,KAAK,CAACR,KAAK,IAAIF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjCV,IAAI,gBAAGT,OAAA;MAAAe,QAAA,EAAMK,IAAI,CAACC,SAAS,CAACZ,IAAI,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAAGnB,OAAA;MAAAe,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAACX,EAAA,CAfID,GAAG;AAAAe,EAAA,GAAHf,GAAG;AAiBT,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}