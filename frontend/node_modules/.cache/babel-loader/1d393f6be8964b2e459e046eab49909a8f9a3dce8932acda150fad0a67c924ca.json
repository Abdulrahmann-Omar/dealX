{"ast":null,"code":"var _jsxFileName = \"D:\\\\dexlx-project\\\\frontend\\\\src\\\\results_page.jsx\";\nimport Card from \"./Card\";\nimport MainNav from \"./Main_Nav\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchResults() {\n  var _s = $RefreshSig$();\n  const ProductList = () => {\n    _s();\n    const [products, setProducts] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    useEffect(() => {\n      // Fetch products from API\n      const fetchProducts = async () => {\n        try {\n          const response = await axios.get('/api/products');\n          setProducts(response.data);\n        } catch (error) {\n          console.error('Error fetching products:', error);\n        }\n      };\n      fetchProducts();\n    }, []);\n    const handleSearchChange = e => {\n      setSearchQuery(e.target.value);\n    };\n\n    // Filter and sort products based on the search query\n    const filteredProducts = products.filter(product => product.name.toLowerCase().includes(searchQuery.toLowerCase())).sort((a, b) => {\n      // Example sorting: prioritize products with names starting with the search query\n      const aStartsWith = a.name.toLowerCase().startsWith(searchQuery.toLowerCase());\n      const bStartsWith = b.name.toLowerCase().startsWith(searchQuery.toLowerCase());\n      if (aStartsWith && !bStartsWith) return -1; // `a` comes first\n      if (!aStartsWith && bStartsWith) return 1; // `b` comes first\n\n      // If both or neither start with the query, sort alphabetically\n      return a.name.localeCompare(b.name);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for products...\",\n        value: searchQuery,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"product-list\",\n        children: filteredProducts.map((product, index) => /*#__PURE__*/_jsxDEV(Card, {\n          // Fallback to index if id is unavailable\n          product: product,\n          onAddToCart: handleAddToCart,\n          onAddToWishlist: handleAddToWishlist,\n          onViewProduct: handleViewProduct\n        }, product.id || index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 1\n    }, this);\n  };\n  _s(ProductList, \"npCM2AUseVHztFeCARNwhUaEBXw=\");\n}\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["Card","MainNav","React","useEffect","useState","jsxDEV","_jsxDEV","SearchResults","_s","$RefreshSig$","ProductList","products","setProducts","searchQuery","setSearchQuery","fetchProducts","response","axios","get","data","error","console","handleSearchChange","e","target","value","filteredProducts","filter","product","name","toLowerCase","includes","sort","a","b","aStartsWith","startsWith","bStartsWith","localeCompare","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onAddToCart","handleAddToCart","onAddToWishlist","handleAddToWishlist","onViewProduct","handleViewProduct","id","_c","$RefreshReg$"],"sources":["D:/dexlx-project/frontend/src/results_page.jsx"],"sourcesContent":["import Card from \"./Card\"\r\nimport MainNav from \"./Main_Nav\";\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nfunction SearchResults() {\r\n\r\nconst ProductList = () => {\r\nconst [products, setProducts] = useState([]);\r\nconst [searchQuery, setSearchQuery] = useState('');\r\n\r\nuseEffect(() => {\r\n// Fetch products from API\r\nconst fetchProducts = async () => {\r\n    try {\r\n    const response = await axios.get('/api/products');\r\n    setProducts(response.data);\r\n    } catch (error) {\r\n    console.error('Error fetching products:', error);\r\n    }\r\n};\r\n\r\nfetchProducts();\r\n}, []);\r\n\r\nconst handleSearchChange = (e) => {\r\nsetSearchQuery(e.target.value);\r\n};\r\n\r\n// Filter and sort products based on the search query\r\nconst filteredProducts = products\r\n.filter((product) =>\r\n    product.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n)\r\n.sort((a, b) => {\r\n    // Example sorting: prioritize products with names starting with the search query\r\n    const aStartsWith = a.name.toLowerCase().startsWith(searchQuery.toLowerCase());\r\n    const bStartsWith = b.name.toLowerCase().startsWith(searchQuery.toLowerCase());\r\n\r\n    if (aStartsWith && !bStartsWith) return -1; // `a` comes first\r\n    if (!aStartsWith && bStartsWith) return 1;  // `b` comes first\r\n\r\n    // If both or neither start with the query, sort alphabetically\r\n    return a.name.localeCompare(b.name);\r\n});\r\n\r\nreturn (\r\n<div>\r\n    {/* Search Input */}\r\n    <input\r\n    type=\"text\"\r\n    placeholder=\"Search for products...\"\r\n    value={searchQuery}\r\n    onChange={handleSearchChange}\r\n    />\r\n\r\n    {/* Product List */}\r\n    <div className=\"product-list\">\r\n    {filteredProducts.map((product, index) => (\r\n        <Card\r\n        key={product.id || index} // Fallback to index if id is unavailable\r\n        product={product}\r\n        onAddToCart={handleAddToCart}\r\n        onAddToWishlist={handleAddToWishlist}\r\n        onViewProduct={handleViewProduct}\r\n        />\r\n    ))}\r\n    </div>\r\n</div>\r\n);\r\n\r\n}\r\n}\r\nexport default SearchResults;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}